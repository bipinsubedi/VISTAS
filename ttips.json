{
    "SCHtransp": "SCHtransp: boolean \n -----\n Carrier transport across the barriers (SCH) into the QWs\n significantly affects the dynamic behaviour of electrically pumped VCSELs. ",
    "GainSpectr": "GainSpectr: boolean \n ----- \n Calculates the gain for each mode based on its wavelength (calculated by the mode solver) and the gain spectrum (parabolic approximation). ",
    "ThermMod": "ThermMod: boolean \n -----",
    "Noise": "Noise: boolean \n -----\n Simulating Langevin noise sources requires knowing the timestep\n at each step. Therefore, 'Finite Diff.' is the only allowed ODE solver. ",
    "Parasitics": "Parasitics: boolean \n -----\n -The ideal drive current signal is filtered by a passive circuit:\n pad capacitance, mirrors resistance, active area capacitance\n and and active area resistance.\n -The filtering happens in the frequency domain.\n -The steady-state signal is not affected.\n -The small signal is not altered by parasitics to isolate the\n intrinsic VCSEL response. The parasitics\n contribution is added separately on the HF plot. ",
    "2D": "2D: boolean \n -----",
    "nNw": "nNw: int\n -----\n Number of Bessel terms in the carrier radial series expansion of the carrier density Nw in the QWs. ",
    "odeSolver": "odeSolver: string \n -----\n -Check scipy.integrate.solve_ivp documentation for more details.\n -Automatically switches to 'Finite Diff.' if 'Noise' is checked. ",
    "tmax": "tmax: float \n -----\n Defined automatically when computing the RIN spectrum or frequency response. ",
    "dt": "dt: float \n -----\n This time-step is used to define the parameter teval of solve_ivp, that is,\n it defines the spatial resolution for storing/plotting the results. ",
    "dtFD":"dtFD: float \n -----\n Fixed time-step for the Finite Differences solver.\n Generally approximately one order of magnitude smaller than dt.\n Once the computation is complete, the results are subsampled to dt. ",
    "modFormat": "modFormat: string \n -----\n 'step': turn vcsel on from 0 to Ion.\n 'pulse': step up from Ioff (steady-state as starting point) to Ion at t=0,\n and back down to Ioff at t=tmax/2\n 'random bits': generate sequence of random bits of duration tb\n between Ioff (steady-state as starting point) and Ion\n 'small signal': apply small signal step to steady-state bias current Ion\n to compute the frequency response. Simulation time and\n number of time steps are hard-coded for best results.\n 'steady state': no modulation, typically used to visualize noise\n and compute the RIN spectrum. ",
    "Ion": "Ion: float \n -----\n 'high' current in selected modulation pattern. ",
    "Ioff": "Ioff: float \n -----\n 'low' current in selected pattern. ",
    "Iss": "Iss: float \n -----\n Amplitude of small signal step, must be chosen small enough\n to remain in the VCSEL's linear operations range. ",
    "tb": "tb: float \n -----\n Duration of a single on or off signal step. ",
    "Modes2Dplot": "2Dmodes: boolean \n Plots all 2D modes (cosine azimuthal variant).\n When simulating in 1D, the sine and cosine variants\n add up to degenerate 'doughnut-shaped' modes. ",
    "PIplot": "LIplot: boolean \n -----\n Plots the steady-state LI characteristic (modal and total power). ",
    "Ptplot": "Ptplot: boolean \n -----\n Plots the laser output in the time-domain (modal and total power). ",
    "NwS2Dplot": "2Dprofiles: \n -----\n Reconstructs and plots the 2D carrier and photon profiles\n within the cavity at t=tmax by default",
    "RINplot": "RIN: boolean \n -----\n  Plots the 'Relative Intensity Noise' spectrum.\n Switches automatically to the modulation format 'steady state' when selected.\n 'Noise' must be selected. 'Parasitics' without any effect. ",
    "Hfplot": "Hfplot: boolean \n -----\n  Switches automatically to the modulation format 'small signal' when selected.\n Hidden when 'Noise' is selected. ",
    "Eyeplot": "Eyeplot: \n -----\n Plots the eye diagram. Switches automatically to\n the modulation format 'random bits' when selected. ",
    "vcselDescr": "vcselDescr: string \n -----",
    "rox": "rox: float \n -----\n Oxide aperture, proxy to delimit the 'active area' of the cavity. ",
    "Leff": "Leff: float \n -----\n Effective cavity length, consisting approximately of the wavelength\n plus the penetration depth into the Distributed Bragg Reflectors (DBR). ",
    "nw": "nw: float \n -----\n Number of quantum wells, required to calculate the equivalent active volume. ",
    "dw": "dw: float \n -----\n Single quantum well thickness, required to calculate the equivalent active volume. ",
    "db": "db: float \n -----\n Barrier thickness (Single Confinement Heterostructure), required to compute transport into the QWs. ",
    "wl0": "wl0: float  \n -----\n At operating temperature, the resonance wavelength should be as close as \n possible to the peak wavelength wlp. Since the gain spectrum exhibits \n stronger temperature-induced red shift than the cavity resonance wavelenth, \n the cavity is generally designed with wl0>wlp0 at 300k. ",
    "nc": "nc: float \n -----\n ",
    "ng": "ng: float \n -----\n ",
    "dn": "dn: float \n -----\n ",
    "Rt": "Rt: float \n -----\n ",
    "Rb": "Rb: float \n -----\n ",
    "alphai": "alphai: float \n -----\n ",
    "beta": "beta: float \n -----\n ",
    "gln": "gln: float \n -----\n ",
    "wlp0": "wlp0: float \n -----\n Wavelength at which the gain curve reaches its maximum (@ 300K). ",
    "glw": "glw: float \n -----\n Characteristic linewidth of the parabolic gain approximation. ",
    "Ntr": "Ntr: float \n -----\n ",
    "epsilon": "epsilon: float \n -----\n ",
    "GamR": "GamR: float \n -----\n Also referred to as gain enhancement factor.\n Not to be mistaken with the longitudinal confinement factor Gam_z! ",
    "tauNb": "tauNb: float \n -----\n Carrier lifetime in the barriers (SCH). ",
    "tauNw": "tauNw: float \n -----\n ",
    "tauEsc": "tauEsc: float \n -----\n ",
    "tauCap": "tauCap: float \n -----\n ",
    "etai": "etai: float \n -----\n ",
    "rs": "rs: float \n -----\n ",
    "DN": "DN: float \n -----\n ",
    "Cp":"Cp: float \n -----\n ",
    "Rm": "Rm: float \n -----\n ",
    "Ca":"Ca: float \n -----\n ",
    "Ra": "Ra: float \n -----\n ",
    "modalParamsReflectivity": " Some parameters may slightly vary across optical modes. \n VISTAS allows introducing such modal asymmetries \n to favour or inhibit specific modes. \n This is achieved by slightly adjusting the coefficients \n on this tab for each of the nine lowest order modes.\n The coefficients (generally around 1) are then used to\n multiply the original scalar parameter and transform \n it into a 'modal vector' for the computations.\n Four core parameters can be adjusted in this manner: \n DBR reflectivities, internal optical losses, \n spontaneous emission and gain compression.\n\n Mirrors reflectivity:\n These coefficients introduce modal variations in\n the top and bottom mirror reflectivities.\n 'Rt' and Rb' are used to compute the mirror losses\n 'alpham' and photon lifetime 'tauS'.\n Given the DBR construction, the same coefficients\n are used for both top and bottom reflectivities. ",    
    "modalParamsIntOptLosses": " Some parameters may slightly vary across optical modes. \n VISTAS allows introducing such modal asymmetries \n to favour or inhibit specific modes. \n This is achieved by slightly adjusting the coefficients \n on this tab for each of the nine lowest order modes.\n The coefficients (generally around 1) are then used to\n multiply the original scalar parameter and transform \n it into a 'modal vector' for the computations.\n Four core parameters can be adjusted in this manner: \n DBR reflectivities, internal optical losses, \n spontaneous emission and gain compression.\n\n Internal Optical Losses:\n These coefficients introduce modal variations in\n the internal optical losses 'alphai', which in turn\n impact photon lifetime and output power. ",
    "modalParamsSpontEmission": " Some parameters may slightly vary across optical modes. \n VISTAS allows introducing such modal asymmetries \n to favour or inhibit specific modes. \n This is achieved by slightly adjusting the coefficients \n on this tab for each of the nine lowest order modes.\n The coefficients (generally around 1) are then used to\n multiply the original scalar parameter and transform \n it into a 'modal vector' for the computations.\n Four core parameters can be adjusted in this manner: \n DBR reflectivities, internal optical losses, \n spontaneous emission and gain compression.\n\n Spontaneous emission factor:\n These coefficients introduce modal variations in\n the spontaneous emission factor 'beta', which in turn\n affects the noise behaviour. ",
    "modalParamsGainCompression": " Some parameters may slightly vary across optical modes. \n VISTAS allows introducing such modal asymmetries \n to favour or inhibit specific modes. \n This is achieved by slightly adjusting the coefficients \n on this tab for each of the nine lowest order modes.\n The coefficients (generally around 1) are then used to\n multiply the original scalar parameter and transform \n it into a 'modal vector' for the computations.\n Four core parameters can be adjusted in this manner: \n DBR reflectivities, internal optical losses, \n spontaneous emission and gain compression.\n\n Gain compression factor:\n These coefficients introduce modal variations in\n the gain compression factor 'epsilon', which reduces\n the gain at high photon densities. "
}