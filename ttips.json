{
    "SCHTransp": "SCHTransp: boolean",
    "ThermMod": "ThermMod: boolean",
    "Noise": "Noise: boolean",
    "Parasitics": "Parasitics: boolean",
    "2D": "2D: boolean",
    "ni": "ni: int",
    "storeN": "storeN: boolean",
    "odeSolver": "odeSolver: string\ncheck scipy.integrate.solve_ivp documentation for more details",
    "tmax": "tmax: float",
    "dt": "dt: float",
    "dtFD":"dtFD: float\n",
    "modFormat": "modFormat: string\nstep: turn vcsel on from 0 to Ion\npulse: step up from 0 Ion at t=0, and down to Ioff at t=tmax/2\nrandom bits: generate sequence of random bits of duration tb between Ioff (steady-state as starting point) and Ion\nsmall signal: apply small signal step to steady-state bias current Ion to calculate MTF",
    "Ion": "Ion: float\n'low' current in selected pattern",
    "Ioff": "Ioff: float\n'high' current in selected pattern",
    "Iss": "Iss: float\namplitude of small signal step",
    "tb": "tb: float\nduration of a single on or off signal step",
    "2Dmodes": "2Dmodes: boolean",
    "LIplot": "LIplot: boolean",
    "Ptplot": "Ptplot: boolean",
    "2Dprofiles": "2Dprofiles: boolean",
    "RIN": "RIN: boolean",
    "MTF": "MTF: boolean",
    "eye": "eye: boolean",
    "vcselDescr": "vcselDescr: string\n",
    "r_ox": "r_ox: float \nthe oxide aperture is considered to delimit the 'active area' of the cavity",
    "Leff": "Leff: float\nthe effective cavity length consists approximately of the wavelength\nplus the penetration depth into the Distributed Bragg Reflectors (DBR)",
    "nqw": "nqw: float\nthe number of quantum wells is required to calculate the equivalent active volume",
    "dqw": "dqw: float\nthe single quantum well thickness is required to calculate the equivalent active volume",
    "db": "db: float\nthickness of the Single Confinement Heterostructure, required by SCHTransp",
    "wl0": "wl0: float\n",
    "nc": "nc: float\n",
    "ng": "ng: float\n",
    "delta_n": "delta_n: float\n",
    "Rt": "Rt: float\n",
    "Rb": "Rb: float\n",
    "alpha_i": "alpha_i: float\n",
    "tau_N": "tau_N: float\n",
    "beta": "beta: float\n",
    "gln": "gln: float\n",
    "Ntr": "Ntr: float\n",
    "epsilon": "epsilon: float\n",
    "Gam_r": "Gam_r: float\nalso referred to as gain enhancement factor\nnot to be mistaken with the longitudinal confinement factor Gam_z!",
    "tau_esc": "tau_esc: float\n",
    "tau_cap": "tau_cap: float\n",
    "eta_i": "eta_i: float\n",
    "rs": "rs: float\n",
    "DN": "DN: float\n"
}